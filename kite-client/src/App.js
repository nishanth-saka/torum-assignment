import React, { useEffect, useState } from 'react';
import { useTable } from 'react-table';
import axios from 'axios';
import _ from 'lodash';
import moment from 'moment';
import StickyTable from "react-sticky-table-thead"

 let _sampleArray = [
   {
     name: 'BERGEPAINT',
     code: 130426884
   },{
    name: 'RCOM',
    code: 3375873
  },{
    name: 'DLF',
    code: 136414212
  },{
    name: 'AAPLLTD',
    code: 136642052
  }   
 ];

var _scrips = [
  2006529,623361,674817,812033,4885505,4531201,2177537,7571713,2520833,1273089,773633,3612417,615937,297985,2525953,3564801,1383425,3031041,7945729,7946241,45057,46081,47617,49153,3058945,3059713,3060225,3072769,3711233,3711745,3717633,3719425,8183041,8183297,8183553,8183809,8184065,8184321,7581697,449025,450049,450817,451329,451841,452353,4454401,8059393,8059649,8059905,8060161,8060417,8060673,102145,7611649,2707457,2949633,2368769,1897217,619777,1736193,65281,4824065,3404801,3409921,3373569,831233,624385,2197761,3924993,625153,2761217,1064961,2305793,3322369,1356545,5200385,1933569,2877185,7820801,2977281,8130049,8130561,8131073,8131585,8132097,8132609,1888513,2748673,2749697,2750465,2750977,2751745,2752257,2762497,601601,1389057,3724033,2756609,5181953,3131137,2748929,4464129,2075905,2981121,2796033,3802369,29953,6203137,5506817,6525953,2544385,633601,3911169,635137,5496065,1482497,8057601,237825,2600705,3356417,3672577,3655169,7702785,760833,638209,4661249,638977,5102337,3410177,762625,2671361,2438145,643585,920833,427009,3689729,6519809,5474049,4367873,1038081,4170753,6500353,1572097,1441537,3571457,4385281,1513217,1397761,3530497,665345,5544193,1547521,2994945,3896065,662785,674049,3342081,1310721,1311489,1312257,1313025,1313793,1314305,1317121,1318657,1319681,1320961,7455745,3936513,5001473,1347585,668161,617473,5278977,577537,722433,2880001,4701441,2905857,3660545,5112833,5113345,5113857,5114369,5125633,5126145,5126657,5127169,676609,3454977,5786113,6491649,648961,240641,3650561,894465,678145,3725313,681985,700929,6191105,2929921,7893761,4861953,3446529,3618305,2641409,3563521,2730497,2236417,4840449,2391553,2402561,5234177,4873217,4518657,2455041,6583809,687873,2729217,2919169,2546177,2546689,2547201,2551297,2552065,2553601,2555393,465665,3834113,4724993,2681089,3893505,2636033,3568897,1262337,693249,5017345,308225,3226369,694017,695553,4453633,696321,1000449,2987777,5197313,5025537,3037185,4107521,924673,1354753,2259201,909569,4954113,7387905,701185,5376257,5344513,3848193,2906881,3609857,129793,1112065,3429377,3820033,1026561,3365633,3924481,4305665,1502721,4532225,3357697,2400257,2798593,2813441,5088513,622337,3926273,1894657,555009,4854785,1879297,719105,3687169,3070977,720897,3472641,2636801,523009,1174273,2009857,5154305,726273,4288257,728065,3443457,731905,4286721,4708097,733697,3375873,3930881,7451905,7452417,7580673,7581185,7931393,7931905,7932417,7932929,7933441,7933953,750337,750849,751361,752897,754433,755969,5101057,5100545,3649281,4547585,2317057,6201601,1201153,13057,738561,958977,3857409,1226497,1015041,3078657,7577089,378881,3360257,5202689,3062017,1359105,3873025,5563649,4950273,4950785,4951297,4951809,4952321,4952833,7977729,744705,745473,962817,5363201,396033,2921217,1233921,5584897,3065601,508417,3427841,3375361,1351425,4890625,747009,93697,4968961,7401729,32769,4281601,3906817,5314561,1214465,2078465,1645825,715265,3433985,6988033,4485121,752385,4359425,2156289,3538177,6585345,6296321,400641,2445313,755457,4735233,3855361,3388417,2718209,3336961,2092801,3601409,758529,2441985,760065,3019265,3392257,5468673,4441857,2978305,2918145,1056513,4876545,764929,613633,1071105,767233,3598849,2824193,369153,1472257,11777,4546049,1874433,3595009,460289,3067649,5136129,3558145,2827521,2675969,1191937,4600577,1323009,189441,184833,1847809,5582849,779521,6913,258817,5298689,7995905,780289,342529,2145537,3334401,105473,2830849,3481089,6989569,3659777,1409793,784897,4483585,4453121,4421633,2605057,1884417,1882369,6505985,2771969,4911105,4828673,4717825,3303425,5730561,1396481,3950593,159489,203521,220673,186625,1959425,4706561,2244097,4521985,563201,4380161,241921,2126849,491521,512769,972801,5498113,2855425,5693953,1308929,2626817,4883969,958209,4706817,5239553,4723457,5370881,740097,4856833,957953,719361,343553,4415489,4915969,117249,127233,138241,101889,1626881,213505,64001,77825,90881,1525761,3579137,3648513,4811521,3381505,38145,1427201,1309185,3421953,3035905,2734849,6546945,182785,3927553,5202177,1446401,787969,1277953,2695681,26625,4363265,1298433,4081921,4544513,3521537,383233,205825,3442177,2870273,3024129,181249,793345,794369,2710529,1952513,1463809,2854145,800257,801025,4400641,3005185,3918849,1651457,2608129,1201409,3517441,1630209,805889,806401,1157633,169473,5252097,2892289,637953,1050881,4888833,141057,3740673,809473,97537,1492737,2828801,5504257,3584257,3608577,4834049,815617,1164801,2413569,1211393,287489,2531585,593921,867073,5517057,3668225,216833,1239809,3539457,749057,940033,3412993,315137,1675265,1075457,4555265,1199105,3485697,892417,1688577,512257,3347457,773377,1522689,2477569,4672513,2927361,3785729,4960001,6939393,1295361,2089729,5744385,832513,2930177,3055361,850177,5494273,5401345,8150273,2330113,4993537,4994049,4994561,4995073,5003777,5004289,5509377,5509889,5510401,5510913,5511425,5511937,5512449,5512961,5513473,4584961,4585473,4553473,4563969,4564481,4564993,4580353,4580865,4581377,836353,837889,3732993,3821313,5374209,35841,1102337,76289,127489,178177,256257,485633,1571841,1574145,1578497,1579009,1580033,2206977,2208001,2208513,2210049,2212353,2213377,2217729,3305985,3306497,3307265,3308801,3309313,3310337,3310849,3311361,3311873,3312897,4391681,4392193,4392705,4393217,4393729,4396033,4397313,4397825,687617,3028993,4612609,1887745,5399297,842497,2802689,2663937,5462785,5499905,1100545,2383105,539393,1327617,2474497,247553,850945,851713,5322241,4378881,2851841,5446401,7426049,4846337,854785,558849,1069825,856321,857089,857857,4516097,3431425,5277697,859393,860161,2992385,355585,860929,5395713,2739201,2179329,3034113,864001,760321,3533057,163329,2875649,4593921,767489,3076609,835073,1285121,6936321,866305,3048705,3197185,6192641,2622209,869377,2394625,3818753,3493889,3577857,336385,541953,4819713,404737,3781377,5143553,4293121,4294401,4297985,4298497,4309505,4310017,4310529,4318721,4319233,4319745,4324865,871681,185345,952577,878593,873217,414977,876289,884737,4343041,877057,895745,2219521,419585,1321473,6921473,1287937,1290753,1294337,1294849,3313665,3314433,3315457,3315969,3316737,3317249,3318017,3318529,2708481,6003713,4921089,1221377,1068033,47105,2953217,6445569,3255297,6449665,3465729,1649921,5409537,839681,4938753,2956545,4662785,5587969,887297,3666689,3739393,4638209,5485313,7383553,3709185,889601,891137,7941377,4360193,4914177,3588865,3641089,79873,6523393,891905,2743553,3764993,3634689,894209,2334977,894977,5598209,5704705,897537,4916481,898305,1018881,2530305,982273,900609,3529217,5740289,4328449,2360065,5442561,6420993,1924609,502785,4605697,2479361,1389569,3884545,6549505,3348737,2910465,907777,3664385,2292225,3637249,2883841,2170625,3646721,2886401,4737025,3945985,4278529,913921,1078273,2873089,269569,2313985,5011969,1360129,6537217,4369665,3898369,2952193,2915073,4900353,916225,51457,2891009,464129,2752769,2276609,4406529,4607745,4858113,923393,4520705,2889473,594433,5171969,2263041,134913,5744641,5498369,2690817,2691841,2347009,930305,3424257,1521921,3781121,6194177,2909185,4246785,3415553,84481,2872321,933377,987393,326145,4636161,6487041,4843777,4218369,784129,961793,3547905,682497,4828929,941057,2214913,3932673,3044353,1233409,3465217,1429761,4528897,6593537,2542337,3109889,944129,3353857,4445185,945665,974593,1444609,4306177,3799809,947969,2156545,1515521,1080577,3403521,1870337,3013889,1768449,3507713,7648513,3063041,951041,816129,7496705,3475713,951809,2226177,5369089,6929153,953345,6218753,530689,5168129,4330241,956417,1283329,3601153,958721,494849,3738113,959489,3026177,2976257,5068801,2880769,1084161,2964481,5501953,2857985,964097,4610817,965633,1373697,6392065,5245697,969473,1921537,768513,5702913,3795969,972545,2996481,2170113,2920193,6399745,3050241,1408257,975873,4283905,5338113,3585537,1069057,3728897,275457,1922049,154113,978177,1304833,2916865,7436801,979713,4514561
  // 2006529,623361,674817
]
  ;

let _scripCode = 1347585; //  RCOM-3375873, DLF-136414212
 function App() {
   const data = React.useMemo(
     () => [
       {
         col1: 'Hello',
         col2: 'World',
       },
       {
         col1: 'react-table',
         col2: 'rocks',
       },
       {
         col1: 'whatever',
         col2: 'you want',
       },
     ],
     []
   )
 
   const columns = [
      {
        Header: 'Index',
        accessor: 'index', // accessor is the "key" in the data
      }, 
      {
         Header: 'Date',
         accessor: 'stockDate', // accessor is the "key" in the data
       },
       {
         Header: 'Close',
         accessor: 'close',
       },
       {
         Header: 'SMA',
         accessor: 'sma',
       },
       {
        Header: 'VWAP',
        accessor: 'vwap',
      },
       {
          Header: 'RSI',
          accessor: 'rsi',
        },        
        {
          Header: 'VOL',
          accessor: 'vol',
        },
        {
          Header: 'SIGNAL',
          accessor: 'sig',
        },
       {
         Header: 'SUPER',
         accessor: 'str',
       },
      ,
     ];
   const [tableColumns, setTableColumns] = new useState(columns);
   const [tableRows, setTableRows] = new useState([]);

   useEffect(() => {
    let _updateRows = [];
     _.forEach(_scrips, async(obj, index) => {      
      await getHistoryData(obj, _updateRows);
     })

      // getHistoryData(_scripCode);

   }, [tableColumns])

   function getSignal(date, scripCode, close, rsi, sma, str, volume, rsiArray, volumeArray, superArray, indexInt){
     let _return = null;
     let _meanRSI = _.mean(rsiArray);
     let _meanVolume = _.mean(volumeArray);
     let _isSuperTrend = false;
     
     if(rsi == undefined || sma == undefined){
      return _return;
     }

     if(superArray[indexInt - 1]){
      let _prevSuper = superArray[indexInt - 1].Direction;
      if(_prevSuper === 'DOWN'){
        _isSuperTrend = true;
      }      
     }

     if(close > sma && 
      rsi >= 60 && 
      _meanRSI <= 60 && 
      volume > _meanVolume && 
      str.Direction == 1){
      
      console.log('scripCode', scripCode);
      console.log('date', date);
      console.log('close', close);
      console.log('rsi', rsi);
      console.log('volume', volume);
      console.log('');

      _return = 'BUY';
     }  

     return _return;
   }

   function getTrendText(strObj){
    let _strText = '-';

    if(strObj && strObj.Up){
      _strText = `Up: ${strObj.Up.toFixed(0)} | Down: ${strObj.Down.toFixed(0)} | Active: ${strObj.ActiveTrend.toFixed(0)} | Dir: ${strObj.Direction}`;
      _strText = `Trend: ${strObj.Direction == 1 ? 'Up' : 'Down'}`;
    }
    return _strText;
   }

   async function getHistoryData (scripCode, updateRows){
     let _getHistoryURL = `https://kite-connect-nodejs.herokuapp.com/getHistoricalData?instrument_token=${scripCode}`;
     return await axios.get(_getHistoryURL)
     .then(async(response) => {
      
      if(response?.data){
        let _responseArray = response.data;
        let _prevIndex = 0;
        _responseArray = _.compact(_responseArray);
        let _rsiArray = [];
        let _volumeArray = [];
        let _superArray = [];
        
        let _tableRowsArray = _.map(_responseArray, (obj, index) => {
          _rsiArray.push(obj.valueRSI);
          _volumeArray.push(obj.volume);

          if(_rsiArray.length > 4){
            _rsiArray = [obj.valueRSI];
          }
         
          if(_volumeArray.length > 4){
            _volumeArray = [obj.volume];
          }

          _superArray.push(obj.valueSTR?.Direction)
          
          let _signal = getSignal(obj.date, scripCode, obj.close, obj.valueRSI, obj.valueSMA, obj.valueSTR, obj.volume, _rsiArray, _volumeArray, _superArray, index);

          let _diffValue = (obj.index - _prevIndex);
          let _prevSign = '-';

          if((obj.valueSTR?.Up && _signal)){
            _prevIndex = obj.index;
            let _row = {
              index: scripCode,
              date: moment(obj.momentDate).format('MMM DD, YYYY'),
              close: obj.close.toFixed(1),
              sma: obj.valueSMA.toFixed(1),        
              vwap: obj.valueVWAP.toFixed(1),              
              rsi: obj.valueRSI.toFixed(1),              
              vol: obj.volume,              
              sig: _signal ?? '-',
              str: obj.valueSTR ? getTrendText(obj.valueSTR) : '-'      
            }

            if(moment(obj.momentDate).year() == moment(new Date()).year() &&
              moment(obj.momentDate).month() == moment(new Date()).month()){
              return _row;                       
            }
            
          } else {
            let _row = {
              index: scripCode,
              date: moment(obj.momentDate).format('MMM DD, YYYY'),
              close: obj.close.toFixed(1),
              sma: obj.valueSMA?.toFixed(1),        
              vwap: obj.valueVWAP?.toFixed(1),              
              rsi: obj.valueRSI?.toFixed(1),              
              vol: obj.volume,              
              sig: '-',
              str: obj.valueSTR ? getTrendText(obj.valueSTR) : '-'      
            }
            // return _row;
          }

        })

        _tableRowsArray = _.compact(_tableRowsArray);
        updateRows.push(_tableRowsArray);
        console.log('updateRows', _.flatten(updateRows));
        setTableRows(_.sortBy(_.flatten(updateRows), 'date'));
        
          // setTableRows(_.compact(_updateRows));
        }
     })
     .catch((ex) => {
      console.log('');
      console.log('getHistoryData ex');
      console.log(ex);
      console.log('');
     })
   }

   const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    prepareRow,
  } = useTable({ columns:tableColumns, data:tableRows });
 
   return (
     <div style={{flex:1, alignItems:'center', alignContent:'center'}}>
               <StickyTable height={800}width={600}> 

       <table {...getTableProps()} style={{ backgroundColor:'white'}}>
        <thead>
          {headerGroups.map((headerGroup, indexInt) => (
            <tr key={indexInt}  {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map((column, index) => (
                <th
                key={index}
                  {...column.getHeaderProps()}
                  style={{
                    borderBottom: 'solid 3px red',
                    background: 'aliceblue',
                    color: 'black',
                    fontWeight: 'bold',
                    textAlign:'left',                    
                  }}
                >
                  {column.render('Header')}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody {...getTableBodyProps()}>
          {rows.map((row, index) => {
            
            return (
              <tr key={index}>
                {Object.keys(row.original).map((cell, index) => {                  
                  return (
                    <td      
                      key={index}                
                      style={{
                        padding: '10px',
                        border: 'solid 1px gray',
                        background: row.original?.sig === 'BUY' ? 'papayawhip' : 'lightgray',
                        textAlign:'left',                        
                      }}
                    >
                      {row.original[cell] ?? ''}                      
                    </td>                    
                  )
                })}
              </tr>
            )
          })}
        </tbody>
      </table>
      </StickyTable>
     </div>
     
   )
 }
  
export default App;